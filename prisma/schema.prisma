// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(nanoid(11))
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  puuid                 String?
  gameName              String?
  tagLine               String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(nanoid(11))
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin Boolean @default(false)

  // Payment
  stripeCustomerId String?
  plan             UserPlan @default(FREE)

  // Resend email
  resendContactId String?

  // For the Credentials provider
  passwordHash String?

  firstRole       Role?
  secondRole      Role?
  // custom
  pinnedPresentation String?

  sessions  Session[]
  accounts  Account[]
  feedbacks Feedback[]

  summoner Summoner? 
  lastSummonerUpdate DateTime?
  appliance     Custom?  @relation(fields: [applianceId], references: [id], name: "CustomCandidates")
  applianceId   String?
  createdCustoms Custom[]
  createdCustomIds String[]
  followedUsers User[] @relation("FollowedSummoners")
  followedby User[] @relation("FollowedSummoners")

  blackLisedUsers User[] @relation("BlackListedUser")
  isBlackListedBy User[] @relation("BlackListedUser")

  blueTeamHistory Custom[] @relation("BlueTeam")
  redTeamHistory Custom[] @relation("RedTeam")
}

model Summoner {
  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String @id
  // AccountData
  puuid           String 
  gameName        String
  tagLine         String
  // SummonerData
  id              String 
  accountId       String  
  profileIconId   Int?
  revisionDate    BigInt
  summonerLevel   Int
  tier            String?
  rank            String?
}

model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Custom {
  id          String   @id @default(nanoid(11))
  name        String
  description String
  discordLink String?
  candidates   User[] @relation("CustomCandidates")
  creator     User @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      CustomStatus @default(OPEN)
  blueTeam    User[] @relation("BlueTeam")
  redTeam     User[] @relation("RedTeam")
}

enum UserPlan {
  FREE
  PREMIUM
}

enum CustomStatus {
  OPEN
  CLOSED
  CANCELED
}

enum Role {
  TOP
  JGL
  MID
  BOT
  SUP
}