// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(nanoid(11))
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(nanoid(11))
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin Boolean @default(false)

  // Payment
  stripeCustomerId String?
  plan             UserPlan @default(FREE)

  // Resend email
  resendContactId String?

  // For the Credentials provider
  passwordHash String?

  sessions  Session[]
  accounts  Account[]
  feedbacks Feedback[]
}

model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Summoner {
  id              String   @id @default(nanoid(11))
  puuid           String   @unique
  gameName        String
  tagLine         String
  accountId       String   @unique
  profileIconId   Int
  revisionDate    BigInt
  summonerLevel   Int
  tier            String?
  rank            String?
  blacklist       Boolean  @default(false)
  playedToday Boolean  @default(false)
  inGame      Boolean  @default(false)
  lastUpdated DateTime @updatedAt
  selected    Boolean  @default(false)
  team        Int?
  firstRole       String?

}

model ConceptStart {
  id        Int      @id
  timestamp BigInt
  updateAt     DateTime @default(now()) @updatedAt
}

model Event {
  id        String   @id @default(cuid())
  name String @unique
  createdAt DateTime @default(now())
}

enum UserPlan {
  FREE
  PREMIUM
}